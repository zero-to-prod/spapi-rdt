name: release

on:
  workflow_run:
    workflows: ["backwards_compatibility"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Version (Semantic Sorting)
        id: get_latest_version
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');

            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            let versions = tags
              .map(tag => tag.name.replace(/^v/, '')) // Remove "v" prefix
              .filter(version => semver.valid(version)) // Keep only valid versions
              .sort(semver.rcompare); // Sort in descending order

            let latestVersion = versions.length > 0 ? `v${versions[0]}` : "v1.0.0";
            console.log(`Latest version: ${latestVersion}`);
            core.setOutput("latest_version", latestVersion);

      - name: Determine Next Version
        id: bump_version
        uses: actions/github-script@v7
        env:
          PR_LABELS: ${{ join(github.event.pull_request.labels.*.name, ',') }}
        with:
          script: |
            const semver = require('semver');
            const latestVersion = "${{ steps.get_latest_version.outputs.latest_version }}".replace(/^v/, '');
            const labels = process.env.PR_LABELS ? process.env.PR_LABELS.split(',') : [];

            let newVersion;

            if (labels.includes("breaking-change")) {
              newVersion = semver.inc(latestVersion, 'major');
            } else if (labels.includes("feature") || labels.includes("enhancement")) {
              newVersion = semver.inc(latestVersion, 'minor');
            } else {
              newVersion = semver.inc(latestVersion, 'patch');
            }

            newVersion = `v${newVersion}`; // Ensure "v" prefix is added back
            console.log(`New version: ${newVersion}`);
            core.setOutput("new_version", newVersion);

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/changelog-config.json"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: false