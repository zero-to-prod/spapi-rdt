name: Release

on:
  workflow_run:
    workflows: ["backwards_compatibility"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: get_version
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          LATEST_TAG=${LATEST_TAG#v} # Remove "v" if it exists
          echo "latest_version=$LATEST_TAG" >> $GITHUB_ENV

      - name: Get triggering branch name
        id: get_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
            --jq '.head_branch')
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Determine next version
        id: version_bump
        run: |
          LATEST_VERSION=${{ env.latest_version }}
          BRANCH_NAME=${{ env.branch_name }}

          if [ -z "$LATEST_VERSION" ]; then LATEST_VERSION="1.0.0"; fi
          
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)

          if [[ "$BRANCH_NAME" == feat/* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create Git tag
        run: |
          TAG_NAME="v${{ env.new_version }}"  # Ensure a single "v" is used
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME

      - name: Fetch Merged Pull Requests
        id: fetch_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          LAST_TAG="v${{ env.latest_version }}"
          NEW_TAG="v${{ env.new_version }}"

          PRS=$(gh api "repos/$REPO/pulls?state=closed&sort=updated&direction=desc" \
            --jq '.[] | select(.merged_at != null) | select(.merge_commit_sha as $sha | system("git rev-list --count $LAST_TAG..HEAD -- $sha") | tonumber > 0) | "- \(.title) @\(.user.login) in #\(.number)"')

          if [ -z "$PRS" ]; then
            PRS="No merged pull requests in this release."
          fi

          echo -e "release_notes<<EOF\n$PRS\nEOF" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          body: |
            ${{ env.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}